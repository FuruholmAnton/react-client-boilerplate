// Use on float parent
%clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}


@mixin position($position: absolute, $left: 50%, $top: 50%) {
    position: $position;
    top: $top;
    left: $left;
    transform: translate(-#{$top}, -#{$left});

    @if $top == center {
        top: 50%;
    }
    @if $left == center {
        left: 50%;
    }

}

// Shadow
@mixin box-shadow($x:0, $y:1px, $z:2px, $color:rgba(#000, 0.2)) {

    @if type-of($x) == 'color' {
        box-shadow: 0 1px 2px $x;

    } @else {
        box-shadow: $x $y $z $color;
    }

}

// Aspect ratio: Resize background with set ratio
// REVIEW: Set as vw?
@mixin aspect-ratio($width, $height) {
    height: ($height / $width) * 100%;
}

// Element align: Vertical center element
@mixin element-align($position: relative) {
    position: $position;
    top: 50%;
    transform: translateY(-50%);
}

@mixin absolute-center($position: absolute) {
    position: $position;
    top: 50%;
    left: 50%;
    transform: translateY(-50%, -50%);
}


@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}



/*==================================
=            BREAKPOINT            =
==================================*/

@mixin breakpoint($width: false, $height: false) {

    @if ($width && $height) {
        @if map-has-key($breakpoints, 'width-#{$width}') {
            @if map-has-key($breakpoints, 'height-#{$height}') {
                @media only screen and (min-width: map-get($breakpoints, 'width-#{$width}')) and (min-height: map-get($breakpoints, 'height-#{$height}')) { @content; }
            }
            @else {
                @media only screen and (min-width: map-get($breakpoints, 'width-#{$width}')) and (min-height: $height) { @content; }
            }
        }
        @elseif map-has-key($breakpoints, 'height-#{$height}') {
            @media only screen and (min-width: $width) and (min-height: map-get($breakpoints, 'height-#{$height}')) { @content; }
        }
        @else {
            @media only screen and (min-width: $width) and (min-height: $height) { @content; }
        }
    }
    @elseif ($width) {
        @if map-has-key($breakpoints, 'width-#{$width}') {
            @media only screen and (min-width: map-get($breakpoints, 'width-#{$width}')) { @content; }
        }
        @else {
            @media only screen and (min-width: $width) { @content; }
        }
    }
    @elseif ($height) {
        @if map-has-key($breakpoints, 'height-#{$height}') {
            @media only screen and (min-height: map-get($breakpoints, 'height-#{$height}')) { @content; }
        }
        @else {
            @media only screen and (min-height: $height) { @content; }
        }
    }
    @else {
        @warn 'Breakpoint: width and height not found.';
    }
}

/* TODO: fix this as the one above */
@mixin breakpoint-max($width: '', $height: '') {
    @if map-has-key($breakpoints, 'width-#{$width}') {
        @if map-has-key($breakpoints, 'height-#{$height}') {
            @media only screen and (max-width: map-get($breakpoints, 'width-#{$width}')-1) and (max-height: map-get($breakpoints, 'height-#{$height}')) { @content; }
        }
        @else {
            @media only screen and (max-width: map-get($breakpoints, 'width-#{$width}')-1) { @content; }
        }
    }
    @else {
        @if map-has-key($breakpoints, 'height-#{$height}') {
            @media only screen and (max-height: map-get($breakpoints, 'height-#{$height}')) { @content; }
        }
        @else {
            @warn 'Breakpoint: width and height not found.';
        }
    }
}

/*=====  End of BREAKPOINT  ======*/





